- related_model ||= nil
- wiki_title ||= params[:wiki_title]
- documentable ||= nil
- unless documentable
  - if params[:documentable_id] && params[:documentable_type]
    - documentable = BlobStruct.new :id => params[:documentable_id], :class => Kernel.const_get(params[:documentable_type])

- unless related_model
  - if params[:model_id] && params[:model_type]
    - related_model = BlobStruct.new :id => params[:model_id], :class => Kernel.const_get(params[:model_type])

%table.tabular{:cellspacing => 0}
  %thead
    %tr
      %th
        %span Wiki Documents
        .actions= link_to image_tag('/images/fluxx_engine/theme/default/icons/add.png', :class=> 'add-button'), new_wiki_document_path(:suppress_wiki_input => true, :wiki_document => {:model_id => documentable.id, :model_type => documentable.class.name}), :class => 'to-modal', 'data-on-success' => 'refreshCaller,close,openDetail', 'data-insert' => 'after', :title => "add a wiki doc", 'title'=>wiki_title
  %tbody
    - if !models || models.empty?
      %tr
        %td= "No Wiki Docs"
    - else
      - models.each do |model|
        %tr
          %td.action-item
            - if current_user.has_delete_for_model? model
              %p.actions= link_to image_tag("/images/fluxx_engine/theme/default/icons/delete.png"), wiki_document_path(model), {:class => 'as-delete', 'data-on-success' => 'refreshCaller'}
            %p
              = link_to model.title, wiki_document_path(model), :class => 'new-detail', 'data-insert' => 'after', :title => "view/edit wiki doc"
              <br/>Last Edited
              - if model.updated_at
                = " On #{model.updated_at.mdy}"
              - if model.updated_by
                = " By #{model.updated_by}"
    %tr
      %td