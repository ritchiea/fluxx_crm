-if current_user.is_admin?
  -test_model = Kernel.const_get(model.model_type).find(params['test-model-id']) rescue nil
  -if test_model
    %p= raw test_model.process_liquid_template model.document, view_context
  -else
    -if params['test-model-id'] && !params['test-model-id'].empty?
      = "Could not find #{model.model_type} with ID #{params['test-model-id']}"
    -elsif !params['test-model-id']
      %h1= model.description
      %div.partial
        .pairs
          .key Model Type:
          .value= model.model_type
        .pairs
          .key Document Type:
          .value= model.document_type
        - model_type = Kernel.const_get(model.model_type) rescue nil
        - if model_type and model_type.respond_to? :all_states
          .pairs
            .key Generate State:
            .value= model_type.state_to_english_translation(model.generate_state)
        .pairs
          .key Category:
          .value= model.category
        .pairs
          .key Related Model Document Template:
          .value= model.related_model_document_template
        .pairs
          .key Disposition:
          .value= model.disposition
        .pairs
          .key Do not insert page break between iterations:
          .value= model.do_not_insert_page_break
        .pairs
          .key Display in the ad-hoc document/letter generation list:
          .value= model.display_in_adhoc_list
      %hr
      %p
        model id: <input name=test_model_id class='code-model-id'>
        = link_to "Generate Test Document", model_document_template_path(:generate_document => 1, :printable => 1), :class => "generate-test-document", :target => "_blank"
      %hr
      %p
      .wiki-document
        =raw model.document
    -else
      No test model ID entered